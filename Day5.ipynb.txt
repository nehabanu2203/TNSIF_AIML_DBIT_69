{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "42aae690-4d2e-4175-bc7d-00f68d95e9d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('hello', 1, 1997)\n"
     ]
    }
   ],
   "source": [
    "obj=('hello',1,1997)\n",
    "print(obj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "42a55844-9a62-49ca-84db-0f05eb34d151",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'tuple'>\n"
     ]
    }
   ],
   "source": [
    "obj=(3,)\n",
    "print(type(obj))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "00a53c77-8d20-420b-9aea-6e2f9c9e13b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'tuple'>\n"
     ]
    }
   ],
   "source": [
    "obj=()\n",
    "print(type(obj))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "869c2c8f-aa50-45f3-9fc2-f1259e574f93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3)\n"
     ]
    }
   ],
   "source": [
    "top = tuple([1,2,3])\n",
    "print(top)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1fe1de80-577d-44d1-8118-5e1745b40209",
   "metadata": {},
   "outputs": [],
   "source": [
    "top=(1,2,3,4,5)\n",
    "top=top+(7,)\n",
    "top+(10,)\n",
    "print(top)\n",
    "#top[0]=100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3f75d5c8-9537-4cf1-a624-e23f81f34a0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number of employees:  4\n",
      "Enter salary of employee 1:  10000\n",
      "Enter salary of employee 2:  20000\n",
      "Enter salary of employee 3:  50000\n",
      "Enter salary of employee 4:  100000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('10000', '20000', '50000', '100000')\n",
      "\n",
      "Minimum salary among 4 employees: 10000\n",
      "Maximum salary among 4 employees: 50000\n"
     ]
    }
   ],
   "source": [
    "# Write a python program to input ‘n’ employee salaries and find the minimum and maximum salary amongst ‘n’ employees.\n",
    "\n",
    "n = int(input(\"Enter number of employees: \"))\n",
    "salaries = ()\n",
    "\n",
    "for i in range(n):\n",
    "    salary =input(f\"Enter salary of employee {i+1}: \")\n",
    "    salaries+=(salary,)\n",
    "min_salary = min(salaries)\n",
    "max_salary = max(salaries)\n",
    "print(salaries)\n",
    "\n",
    "print(f\"\\nMinimum salary among {n} employees: {min_salary}\")\n",
    "print(f\"Maximum salary among {n} employees: {max_salary}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6fac1531-e95c-4582-843d-e7c02909ef17",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('PYTHON',)\n",
      "1\n",
      "4\n",
      "(10, 20, 30, 10, 20, 30)\n"
     ]
    }
   ],
   "source": [
    "t = tuple()                     \n",
    "t = t + ('PYTHON',)             \n",
    "print(t)                        \n",
    "print(len(t))                   \n",
    "t1 = (10, 20, 30)               \n",
    "t2 = t1 + t                     \n",
    "print(len(t2))                  \n",
    "t3 = t1 * 2                    \n",
    "print(t3)                       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "88c6899e-e59c-47f1-b25b-6abcbfcf9098",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number of employees:  2\n",
      "Enter name of employee 1:  shayam\n",
      "Enter employee number for shayam:  15434.236634\n",
      "Enter name of employee 2:  ram\n",
      "Enter employee number for ram:  3363515613\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Employee Details:\n",
      "Name: shayam, Employee Number: 15434.236634\n",
      "Name: ram, Employee Number: 3363515613\n",
      "dict_keys(['shayam', 'ram'])\n",
      "dict_values(['15434.236634', '3363515613'])\n"
     ]
    }
   ],
   "source": [
    "#Write a program to input ‘n’ employee numbers and names and store them in a dictionary. Display dictionaries employee’s names(key) and numbers(values) together.\n",
    "\n",
    "n = int(input(\"Enter number of employees: \"))\n",
    "employee_dict = {}\n",
    "for i in range(n):\n",
    "    name = input(f\"Enter name of employee {i+1}: \")\n",
    "    number = input(f\"Enter employee number for {name}: \")\n",
    "    employee_dict[name] = number\n",
    "print(\"Employee Details:\")\n",
    "for name, number in employee_dict.items():\n",
    "    print(f\"Name: {name}, Employee Number: {number}\")\n",
    "\n",
    "print(employee_dict.keys())\n",
    "print(employee_dict.values())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b458998a-62b1-4d7d-a913-72f884120c19",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-2024.02-py310",
   "language": "python",
   "name": "conda-env-anaconda-2024.02-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
